# ***************************************************************************************
# ***************************************************************************************
#
#		Name : 		Makefile
#		Author :	Paul Robson (paul@robsons.org.uk)
#		Date : 		25th November 2023
#		Reviewed :	No
#		Purpose :	Basic Main Makefile
#
# ***************************************************************************************
# ***************************************************************************************

ifeq ($(OS),Windows_NT)
include ..\build_env\common.make
else
include ../build_env/common.make
endif

BASPROG = test.bsc 
RUNCMD =  $(EMULATOR) $(BINDIR)kernel.bin@FC00 build$(S)basic.bin@800 

all: build

# ***************************************************************************************
#
#									Release rebuild
#
# ***************************************************************************************

release:
		make -B -C images
		make -B convert
		make -B build
		
# ***************************************************************************************
#
#						Build the Python Text->BASIC converters
#
# ***************************************************************************************

convert:
	$(CMAKEDIR) build
	$(CCOPY) scripts$(S)*.py build
	$(CCOPY) build$(S)makebasic.py build$(S)__main__.py
	$(CDEL) $(BINDIR)makebasic.zip
	zip -j $(BINDIR)makebasic.zip build$(S)__main__.py build$(S)tokens.py build$(S)tokeniser.py
	$(CDEL) build$(S)*.py

	$(CCOPY) scripts$(S)*.py build
	$(CCOPY) build$(S)listbasic.py build$(S)__main__.py
	$(CDEL) $(BINDIR)listbasic.zip
	zip -j $(BINDIR)listbasic.zip build$(S)__main__.py build$(S)tokens.py
	$(CDEL) build$(S)*.py

# ***************************************************************************************
#
#								Build autogenerated code
#
# ***************************************************************************************

prelim: always
	$(CMAKEDIR) build
	$(CMAKEDIR) sources$(S)generated
	$(CDEL) sources$(S)generated$(S)*.*
	$(CCOPY) $(BINDIR)neo6502.inc sources$(S)generated
	$(PYTHON) scripts$(S)opcodes.py > sources$(S)generated$(S)opcodes.asm
	$(PYTHON) scripts$(S)scanner.py 20 BinaryVectorTable > sources$(S)generated$(S)vectors_binary.asm
	$(PYTHON) scripts$(S)scanner.py 80 StandardVectorTable > sources$(S)generated$(S)vectors_standard.asm
	$(PYTHON) scripts$(S)scanner.py 180 ExtendedVectorTable > sources$(S)generated$(S)vectors_extended.asm
	$(PYTHON) scripts$(S)scanner.py 280 AssemblerVectorTable > sources$(S)generated$(S)vectors_assembler.asm
	$(PYTHON) scripts$(S)token_code.py
	$(PYTHON) scripts$(S)errors.py
	$(PYTHON) scripts$(S)makebuild.py >_include.inc
	$(PYTHON) $(BINDIR)makebasic.zip $(BASPROG) -obuild$(S)tokenised.dat

# ***************************************************************************************
#
#						Build the test BASIC (e.g. runs test.bas)
#
# ***************************************************************************************

tbuild: prelim
	$(ASSEMBLER) -DBASICBUILD=1 basic.asm -L build$(S)basic.lst -o build$(S)basic.bin
	$(PYTHON) $(ROOTDIR)basic$(S)scripts$(S)hconvert.py build$(S)basic.bin build$(S)basic_binary.h basic 800
	$(CCOPY) build$(S)basic_binary.h $(BINDIR)
	$(CCOPY) build$(S)basic.bin $(BINDIR)

trun:tbuild	
	$(RUNCMD) exec

tneo: tbuild
	make -C ..$(S)firmware run 
	
# ***************************************************************************************
#
#							Build the command line basic
#
# ***************************************************************************************

build: prelim
	$(ASSEMBLER) -DBASICBUILD=0 basic.asm -L build/basic.lst -o build/basic.bin
	$(PYTHON) $(ROOTDIR)basic$(S)scripts$(S)hconvert.py build$(S)basic.bin build$(S)basic_binary.h basic 800
	$(CCOPY) build$(S)basic_binary.h $(BINDIR)
	$(CCOPY) build$(S)basic.bin $(BINDIR)

run:build	
	$(RUNCMD) cold
	
# ***************************************************************************************
#
#				Rebuild firmware / emulator after importing common code
#
# ***************************************************************************************

kernel:
	make -C ..$(S)kernel

import: kernel
	make -C ..$(S)emulator import
	make -C ..$(S)emulator

emulator:
	make -C ..$(S)emulator

firmware:
	make -C ..$(S)firmware
	
fik : emulator

	
always:

# ***************************************************************************************
#
#										Test code
#
# ***************************************************************************************

test:
	make binary 
	make brackets
	make unary
	make string
	make assign
	make array

testrun: prelim
	$(ASSEMBLER) basic.asm -L build/basic.lst -o build/basic.bin
	$(RUNCMD) build$(S)tokenised.dat@page exec

binary:
	$(PYTHON) tests$(S)binary.py >test.bsc
	make testrun
brackets:	
	$(PYTHON) tests$(S)brackets.py >test.bsc
	make testrun
unary:
	$(PYTHON) tests$(S)unary.py >test.bsc
	make testrun
string:
	$(PYTHON) tests$(S)string.py >test.bsc
	make testrun
assign:
	$(PYTHON) tests$(S)assign.py >test.bsc
	make testrun
array:
	$(PYTHON) tests$(S)array.py >test.bsc
	make testrun

# ***************************************************************************************
#
#								Run the token testing code
#
# ***************************************************************************************

manytokens:
	make tokens 
	make tokens 
	make tokens 
	make tokens 
	make tokens 
	make tokens 
	make tokens 
	make tokens 
	make tokens 

tokens: prelim	
	$(PYTHON) tests$(S)makeprogram.py
	$(ASSEMBLER) -DBASICBUILD=2 basic.asm -L build/basic.lst -o build/basic.bin
	$(RUNCMD) cold
	$(PYTHON) tests$(S)testprogram.py	

# ***************************************************************************************
#
#				Does a common check of BASIC inline assembler vs 64 tass
#
# ***************************************************************************************

checkasm:
	$(ASSEMBLER) -Wno-error=implied-reg code$(S)checkasm.tass -L build/checkasm.lst -o build/asmtest.bin	
	cmp -b storage/asmtest.inline build/asmtest.bin

# ***************************************************************************************
#
#								Run the machine clean.
#
# ***************************************************************************************

basemachine:
	$(EMULATOR) 

# ***************************************************************************************
#
#								Start VLC showing HDMI in (me only)
#
# ***************************************************************************************

vlc:
	vlc v4l2:///dev/video0:fps=30:chroma=mjpg:width=640:height=480 &

# ***************************************************************************************
#
#											Clean
#
# ***************************************************************************************

clean:
	$(CDEL) build$(S)*.*
	$(CDEL) sources$(S)generate$(S)*.*
	$(CDEL) _include.inc
	$(CDEL) test.bas
	$(CDEL) memory.dump
	